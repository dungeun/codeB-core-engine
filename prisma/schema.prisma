generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                         String                @id @default(cuid())
  email                      String                @unique
  password                   String
  name                       String
  type                       String
  status                     String                @default("ACTIVE")
  statusReason               String?
  statusUpdatedAt            DateTime?
  createdAt                  DateTime              @default(now())
  updatedAt                  DateTime              @updatedAt
  lastLogin                  DateTime?
  verified                   Boolean               @default(false)
  deletedAt                  DateTime?
  businessProfile            BusinessProfile?
  comments                   Comment[]
  files                      File[]
  followers                  Follow[]              @relation("UserFollowers")
  following                  Follow[]              @relation("UserFollowing")
  logs                       Log[]
  notificationSettings       NotificationSettings?
  notifications              Notification[]
  postLikes                  PostLike[]
  editedPostTranslations     PostTranslation[]     @relation("PostTranslationEditor")
  posts                      Post[]
  profile                    Profile?
  reports                    Report[]
  socialAccounts             SocialAccount[]

  @@map("users")
}

model Profile {
  id                     String    @id @default(cuid())
  userId                 String    @unique
  bio                    String?
  profileImage           String?
  profileImageId         String?
  phone                  String?
  birthYear              Int?
  gender                 String?
  instagram              String?
  instagramFollowers     Int?
  youtube                String?
  youtubeSubscribers     Int?
  tiktok                 String?
  tiktokFollowers        Int?
  facebook               String?
  facebookFollowers      Int?
  twitter                String?
  twitterFollowers       Int?
  averageEngagementRate  Float?
  categories             String?
  isVerified             Boolean   @default(false)
  verificationNotes      String?
  verifiedAt             DateTime?
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  followerCount          Int       @default(0)
  naverBlog              String?
  address                String?
  bankName               String?
  bankAccountNumber      String?
  bankAccountHolder      String?
  naverBlogFollowers     Int?
  snsLastUpdated         DateTime?
  naverBlogTodayVisitors Int?
  birthDate              DateTime?
  nationality            String?
  realName               String?
  addressData            Json?
  profileCompleted       Boolean   @default(false)
  user                   User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model BusinessProfile {
  id                   String    @id @default(cuid())
  userId               String    @unique
  companyName          String
  businessNumber       String
  representativeName   String
  businessAddress      String
  businessCategory     String
  businessRegistration String?
  businessFileName     String?
  businessFileSize     Int?
  isVerified           Boolean   @default(false)
  verificationNotes    String?
  verifiedAt           DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("business_profiles")
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  follower    User     @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("follows")
}

model File {
  id           String   @id @default(cuid())
  userId       String
  filename     String
  originalName String
  mimetype     String
  size         Int
  path         String
  url          String
  type         String
  metadata     String   @default("{}")
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("files")
}

model SiteConfig {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  type      String   @default("string")
  category  String?
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  @@index([key])
  @@index([category])
  @@map("site_config")
}

model ApiConfig {
  id               String   @id @default(cuid())
  service          String   @unique
  apiKey           String?
  apiSecret        String?
  endpoint         String?
  region           String?
  bucket           String?
  additionalConfig Json?
  isEnabled        Boolean  @default(false)
  updatedAt        DateTime @updatedAt
  createdAt        DateTime @default(now())

  @@index([service])
  @@map("api_config")
}

model Post {
  id               String            @id @default(cuid())
  title            String
  content          String
  authorId         String
  category         String
  status           String            @default("PUBLISHED")
  views            Int               @default(0)
  likes            Int               @default(0)
  isPinned         Boolean           @default(false)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  deletedAt        DateTime?
  comments         Comment[]
  postLikes        PostLike[]
  postTranslations PostTranslation[]
  author           User              @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("posts")
}

model Comment {
  id        String    @id @default(cuid())
  postId    String
  authorId  String
  content   String
  parentId  String?
  status    String    @default("PUBLISHED")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentReplies")
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model PostLike {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@map("post_likes")
}

model Notification {
  id        String    @id @default(cuid())
  userId    String
  type      String
  title     String
  message   String
  actionUrl String?
  readAt    DateTime?
  metadata  String    @default("{}")
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model NotificationSettings {
  id                 String   @id @default(cuid())
  userId             String   @unique
  email              Boolean  @default(true)
  push               Boolean  @default(true)
  sms                Boolean  @default(false)
  marketing          Boolean  @default(false)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notification_settings")
}

model Report {
  id          String    @id @default(cuid())
  reporterId  String
  type        String
  targetId    String
  reason      String
  description String?
  status      String    @default("pending")
  priority    String    @default("medium")
  adminNotes  String?
  resolvedAt  DateTime?
  resolvedBy  String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  reporter    User      @relation(fields: [reporterId], references: [id], onDelete: Cascade)

  @@map("reports")
}

model LanguagePack {
  id          String   @id @default(cuid())
  key         String   @unique
  ko          String
  en          String
  category    String
  description String?
  isEditable  Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  jp          String

  @@index([category])
  @@map("language_packs")
}

model UISection {
  id           String   @id @default(cuid())
  sectionId    String   @unique
  type         String
  title        String?
  subtitle     String?
  content      Json?
  order        Int      @default(0)
  visible      Boolean  @default(true)
  translations Json?
  settings     Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("ui_sections")
}

model PostTranslation {
  id               String    @id @default(cuid())
  postId           String
  language         String
  title            String
  content          String
  isAutoTranslated Boolean   @default(true)
  lastEditedBy     String?
  editedAt         DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  editor           User?     @relation("PostTranslationEditor", fields: [lastEditedBy], references: [id])
  post             Post      @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([postId, language])
  @@index([language])
  @@map("post_translations")
}

model Log {
  id         String   @id @default(uuid())
  level      String   @db.VarChar(10)
  message    String
  context    Json?
  userId     String?
  requestId  String?  @db.VarChar(50)
  errorStack String?
  component  String?  @db.VarChar(100)
  operation  String?  @db.VarChar(100)
  duration   Int?
  metadata   Json?
  ipAddress  String?  @db.VarChar(45)
  userAgent  String?
  createdAt  DateTime @default(now())
  user       User?    @relation(fields: [userId], references: [id])

  @@index([level])
  @@index([userId])
  @@index([createdAt])
  @@index([requestId])
  @@index([component])
  @@map("logs")
}

model SocialAccount {
  id             String    @id @default(cuid())
  userId         String
  provider       String
  providerUserId String
  accessToken    String?
  refreshToken   String?
  profileImage   String?
  profileData    Json?
  expiresAt      DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, provider])
  @@index([provider])
  @@map("social_accounts")
}

enum UserType {
  ADMIN
  USER
}
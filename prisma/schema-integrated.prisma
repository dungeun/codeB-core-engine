generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ============================
// CORE ENGINE MODELS (유지)
// ============================

model User {
  id                         String                @id @default(cuid())
  email                      String                @unique
  password                   String
  name                       String
  type                       String
  status                     String                @default("ACTIVE")
  statusReason               String?
  statusUpdatedAt            DateTime?
  createdAt                  DateTime              @default(now())
  updatedAt                  DateTime              @updatedAt
  lastLogin                  DateTime?
  verified                   Boolean               @default(false)
  deletedAt                  DateTime?
  businessProfile            BusinessProfile?
  comments                   Comment[]
  files                      File[]
  followers                  Follow[]              @relation("UserFollowers")
  following                  Follow[]              @relation("UserFollowing")
  logs                       Log[]
  notificationSettings       NotificationSettings?
  notifications              Notification[]
  postLikes                  PostLike[]
  editedPostTranslations     PostTranslation[]     @relation("PostTranslationEditor")
  posts                      Post[]
  profile                    Profile?
  reports                    Report[]
  socialAccounts             SocialAccount[]
  
  // ============================
  // COMMERCE RELATIONS (추가)
  // ============================
  cart                       Cart?
  orders                     Order[]
  reviews                    Review[]
  addresses                  Address[]
  wishlist                   Wishlist?
  points                     Point[]
  coupons                    UserCoupon[]

  @@map("users")
}

model Profile {
  id                     String    @id @default(cuid())
  userId                 String    @unique
  bio                    String?
  profileImage           String?
  profileImageId         String?
  phone                  String?
  birthYear              Int?
  gender                 String?
  instagram              String?
  instagramFollowers     Int?
  youtube                String?
  youtubeSubscribers     Int?
  tiktok                 String?
  tiktokFollowers        Int?
  facebook               String?
  facebookFollowers      Int?
  twitter                String?
  twitterFollowers       Int?
  averageEngagementRate  Float?
  categories             String?
  isVerified             Boolean   @default(false)
  verificationNotes      String?
  verifiedAt             DateTime?
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  followerCount          Int       @default(0)
  naverBlog              String?
  address                String?
  bankName               String?
  bankAccountNumber      String?
  bankAccountHolder      String?
  naverBlogFollowers     Int?
  snsLastUpdated         DateTime?
  naverBlogTodayVisitors Int?
  birthDate              DateTime?
  nationality            String?
  realName               String?
  addressData            Json?
  profileCompleted       Boolean   @default(false)
  user                   User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model BusinessProfile {
  id                   String    @id @default(cuid())
  userId               String    @unique
  companyName          String
  businessNumber       String
  representativeName   String
  businessAddress      String
  businessCategory     String
  businessRegistration String?
  businessFileName     String?
  businessFileSize     Int?
  isVerified           Boolean   @default(false)
  verificationNotes    String?
  verifiedAt           DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("business_profiles")
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  follower    User     @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("follows")
}

model File {
  id           String   @id @default(cuid())
  userId       String
  filename     String
  originalName String
  mimetype     String
  size         Int
  path         String
  url          String
  type         String
  metadata     String   @default("{}")
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("files")
}

model SiteConfig {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  type      String   @default("string")
  category  String?
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  @@index([key])
  @@index([category])
  @@map("site_config")
}

model ApiConfig {
  id               String   @id @default(cuid())
  service          String   @unique
  apiKey           String?
  apiSecret        String?
  endpoint         String?
  region           String?
  bucket           String?
  additionalConfig Json?
  isEnabled        Boolean  @default(false)
  updatedAt        DateTime @updatedAt
  createdAt        DateTime @default(now())

  @@index([service])
  @@map("api_config")
}

model Post {
  id               String            @id @default(cuid())
  title            String
  content          String
  authorId         String
  category         String
  status           String            @default("PUBLISHED")
  views            Int               @default(0)
  likes            Int               @default(0)
  isPinned         Boolean           @default(false)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  deletedAt        DateTime?
  comments         Comment[]
  postLikes        PostLike[]
  postTranslations PostTranslation[]
  author           User              @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("posts")
}

model Comment {
  id        String    @id @default(cuid())
  postId    String
  authorId  String
  content   String
  parentId  String?
  status    String    @default("PUBLISHED")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentReplies")
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model PostLike {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@map("post_likes")
}

model Notification {
  id        String    @id @default(cuid())
  userId    String
  type      String
  title     String
  message   String
  actionUrl String?
  readAt    DateTime?
  metadata  String    @default("{}")
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model NotificationSettings {
  id                 String   @id @default(cuid())
  userId             String   @unique
  email              Boolean  @default(true)
  push               Boolean  @default(true)
  sms                Boolean  @default(false)
  marketing          Boolean  @default(false)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notification_settings")
}

model Report {
  id          String    @id @default(cuid())
  reporterId  String
  type        String
  targetId    String
  reason      String
  description String?
  status      String    @default("pending")
  priority    String    @default("medium")
  adminNotes  String?
  resolvedAt  DateTime?
  resolvedBy  String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  reporter    User      @relation(fields: [reporterId], references: [id], onDelete: Cascade)

  @@map("reports")
}

model LanguagePack {
  id          String   @id @default(cuid())
  key         String   @unique
  ko          String
  en          String
  category    String
  description String?
  isEditable  Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  jp          String

  @@index([category])
  @@map("language_packs")
}

model UISection {
  id           String   @id @default(cuid())
  sectionId    String   @unique
  type         String
  title        String?
  subtitle     String?
  content      Json?
  order        Int      @default(0)
  visible      Boolean  @default(true)
  translations Json?
  settings     Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("ui_sections")
}

model PostTranslation {
  id               String    @id @default(cuid())
  postId           String
  language         String
  title            String
  content          String
  isAutoTranslated Boolean   @default(true)
  lastEditedBy     String?
  editedAt         DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  editor           User?     @relation("PostTranslationEditor", fields: [lastEditedBy], references: [id])
  post             Post      @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([postId, language])
  @@index([language])
  @@map("post_translations")
}

model Log {
  id         String   @id @default(uuid())
  level      String   @db.VarChar(10)
  message    String
  context    Json?
  userId     String?
  requestId  String?  @db.VarChar(50)
  errorStack String?
  component  String?  @db.VarChar(100)
  operation  String?  @db.VarChar(100)
  duration   Int?
  metadata   Json?
  ipAddress  String?  @db.VarChar(45)
  userAgent  String?
  createdAt  DateTime @default(now())
  user       User?    @relation(fields: [userId], references: [id])

  @@index([level])
  @@index([userId])
  @@index([createdAt])
  @@index([requestId])
  @@index([component])
  @@map("logs")
}

model SocialAccount {
  id             String    @id @default(cuid())
  userId         String
  provider       String
  providerUserId String
  accessToken    String?
  refreshToken   String?
  profileImage   String?
  profileData    Json?
  expiresAt      DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, provider])
  @@index([provider])
  @@map("social_accounts")
}

// ============================
// COMMERCE MODELS (신규 추가)
// ============================

model Category {
  id          String      @id @default(cuid())
  name        String
  slug        String      @unique
  description String?
  image       String?
  parentId    String?
  position    Int         @default(0)
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  parent      Category?   @relation("CategoryTree", fields: [parentId], references: [id])
  children    Category[]  @relation("CategoryTree")
  products    Product[]

  @@index([slug])
  @@index([parentId])
  @@map("categories")
}

model Product {
  id              String         @id @default(cuid())
  name            String
  slug            String         @unique
  description     String?
  price           Int            // 원 단위로 저장 (100원 = 100)
  compareAt       Int?           // 할인 전 가격
  cost            Int?           // 원가
  sku             String?        @unique
  barcode         String?
  stock           Int            @default(0)
  trackStock      Boolean        @default(true)
  allowBackorder  Boolean        @default(false)
  weight          Float?         // 그램 단위
  width           Float?         // cm 단위
  height          Float?         // cm 단위
  depth           Float?         // cm 단위
  categoryId      String?
  tags            String[]
  status          ProductStatus  @default(DRAFT)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  publishedAt     DateTime?
  metaTitle       String?
  metaDescription String?
  metaKeywords    String[]
  
  // Relations
  category        Category?      @relation(fields: [categoryId], references: [id])
  images          ProductImage[]
  variants        ProductVariant[]
  cartItems       CartItem[]
  orderItems      OrderItem[]
  reviews         Review[]
  wishlistItems   WishlistItem[]

  @@index([slug])
  @@index([sku])
  @@index([categoryId])
  @@index([status])
  @@map("products")
}

model ProductImage {
  id        String  @id @default(cuid())
  url       String
  alt       String?
  position  Int     @default(0)
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@map("product_images")
}

model ProductVariant {
  id        String   @id @default(cuid())
  productId String
  name      String
  sku       String   @unique
  price     Int
  stock     Int      @default(0)
  options   Json     // { "색상": "빨강", "사이즈": "M" }
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([sku])
  @@map("product_variants")
}

model Cart {
  id        String     @id @default(cuid())
  userId    String?    @unique
  sessionId String?    @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]

  @@index([sessionId])
  @@map("carts")
}

model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  productId String
  quantity  Int
  variant   Json?    // 선택된 변형 옵션
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])

  @@unique([cartId, productId])
  @@index([cartId])
  @@index([productId])
  @@map("cart_items")
}

model Order {
  id                String      @id @default(cuid())
  orderNumber       String      @unique
  userId            String?
  status            OrderStatus @default(PENDING)
  subtotal          Int         // 상품 금액 합계
  tax               Int         @default(0)
  shipping          Int         @default(0)
  discount          Int         @default(0)
  total             Int         // 최종 결제 금액
  shippingAddress   Json        // 배송 주소
  billingAddress    Json?       // 청구 주소
  trackingNumber    String?
  carrier           String?     // 택배사
  notes             String?     // 주문 메모
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  
  // Relations
  user              User?       @relation(fields: [userId], references: [id])
  items             OrderItem[]
  payment           Payment?

  @@index([orderNumber])
  @@index([userId])
  @@index([status])
  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  name      String  // 주문 당시 상품명 (변경 방지)
  sku       String? // 주문 당시 SKU
  price     Int     // 주문 당시 가격
  quantity  Int
  variant   Json?   // 주문 당시 변형 옵션
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
  @@map("order_items")
}

model Payment {
  id            String        @id @default(cuid())
  orderId       String        @unique
  provider      String        // toss, kakaopay, naverpay 등
  method        PaymentMethod
  status        PaymentStatus @default(PENDING)
  amount        Int
  currency      String        @default("KRW")
  paymentKey    String?       @unique // 결제 고유키
  transactionId String?       // 거래 ID
  approvalUrl   String?       // 승인 URL
  responseData  Json?         // 결제사 응답 데이터
  metadata      Json?         // 추가 메타데이터
  errorMessage  String?       // 오류 메시지
  paidAt        DateTime?     // 결제 완료 시간
  completedAt   DateTime?     // 처리 완료 시간
  failedAt      DateTime?     // 실패 시간
  cancelledAt   DateTime?     // 취소 시간
  refundedAt    DateTime?     // 환불 시간
  failReason    String?       // 실패 사유
  cancelReason  String?       // 취소 사유
  refundReason  String?       // 환불 사유
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  order         Order         @relation(fields: [orderId], references: [id])
  refunds       Refund[]

  @@index([paymentKey])
  @@index([status])
  @@index([provider])
  @@map("payments")
}

model Refund {
  id          String       @id @default(cuid())
  paymentId   String
  amount      Int
  reason      String
  status      RefundStatus @default(PENDING)
  approvedBy  String?
  approvedAt  DateTime?
  completedAt DateTime?
  metadata    Json?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  payment     Payment      @relation(fields: [paymentId], references: [id])

  @@index([paymentId])
  @@index([status])
  @@map("refunds")
}

model Address {
  id         String   @id @default(cuid())
  userId     String
  name       String   // 받는 사람 이름
  phone      String   // 연락처
  postalCode String   // 우편번호
  address    String   // 주소
  detail     String?  // 상세 주소
  isDefault  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("addresses")
}

model Wishlist {
  id        String         @id @default(cuid())
  userId    String         @unique
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     WishlistItem[]

  @@map("wishlists")
}

model WishlistItem {
  id         String   @id @default(cuid())
  wishlistId String
  productId  String
  createdAt  DateTime @default(now())
  product    Product  @relation(fields: [productId], references: [id])
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id], onDelete: Cascade)

  @@unique([wishlistId, productId])
  @@index([wishlistId])
  @@index([productId])
  @@map("wishlist_items")
}

model Review {
  id        String   @id @default(cuid())
  productId String
  userId    String
  rating    Int      // 1-5점
  title     String?
  content   String?
  images    String[] // 리뷰 이미지 URL 배열
  helpful   Int      @default(0) // 도움이 됨 카운트
  verified  Boolean  @default(false) // 구매 확인 리뷰
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@index([productId])
  @@index([userId])
  @@index([rating])
  @@map("reviews")
}

model Point {
  id          String    @id @default(cuid())
  userId      String
  amount      Int       // 적립/사용 포인트 (음수 가능)
  balance     Int       // 적립 후 잔액
  type        PointType
  description String    // 적립/사용 사유
  orderId     String?   // 관련 주문 ID
  expiresAt   DateTime? // 만료일
  createdAt   DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([type])
  @@map("points")
}

model Coupon {
  id          String       @id @default(cuid())
  code        String       @unique
  name        String
  description String?
  type        CouponType   // FIXED(고정 금액), PERCENTAGE(비율)
  value       Int          // 할인 금액 또는 비율
  minAmount   Int?         // 최소 주문 금액
  maxDiscount Int?         // 최대 할인 금액 (비율 할인시)
  usageLimit  Int?         // 사용 횟수 제한
  usageCount  Int          @default(0) // 현재 사용 횟수
  startsAt    DateTime     // 쿠폰 시작일
  expiresAt   DateTime     // 쿠폰 만료일
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  users       UserCoupon[]

  @@index([code])
  @@map("coupons")
}

model UserCoupon {
  id        String    @id @default(cuid())
  userId    String
  couponId  String
  usedAt    DateTime? // 사용일 (null이면 미사용)
  orderId   String?   // 사용된 주문 ID
  createdAt DateTime  @default(now())
  coupon    Coupon    @relation(fields: [couponId], references: [id])
  user      User      @relation(fields: [userId], references: [id])

  @@unique([userId, couponId])
  @@index([userId])
  @@index([couponId])
  @@map("user_coupons")
}

// ============================
// ENUMS
// ============================

enum UserType {
  ADMIN
  USER
}

// Commerce Enums
enum ProductStatus {
  DRAFT     // 초안
  ACTIVE    // 판매중
  ARCHIVED  // 보관됨
}

enum OrderStatus {
  PENDING           // 주문 대기
  PAYMENT_PENDING   // 결제 대기
  PAYMENT_COMPLETED // 결제 완료
  PAYMENT_FAILED    // 결제 실패
  PROCESSING        // 처리중
  SHIPPED           // 배송중
  DELIVERED         // 배송 완료
  CANCELLED         // 취소됨
  REFUNDED          // 환불됨
  PARTIAL_REFUND    // 부분 환불
}

enum PaymentMethod {
  CARD           // 신용카드
  VIRTUAL_ACCOUNT // 가상계좌
  TRANSFER       // 계좌이체
  MOBILE         // 휴대폰
  CULTURE_GIFT   // 문화상품권
  BOOK_GIFT      // 도서문화상품권
  GAME_GIFT      // 게임문화상품권
  TOSS_PAY       // 토스페이
  SAMSUNG_PAY    // 삼성페이
  EASY_PAY       // 간편결제
}

enum PaymentStatus {
  PENDING        // 결제 대기
  READY          // 결제 준비
  IN_PROGRESS    // 결제 진행중
  COMPLETED      // 결제 완료
  CANCELLED      // 결제 취소
  PARTIAL_REFUND // 부분 환불
  FAILED         // 결제 실패
  EXPIRED        // 결제 만료
}

enum RefundStatus {
  PENDING    // 환불 대기
  APPROVED   // 환불 승인
  COMPLETED  // 환불 완료
  REJECTED   // 환불 거절
  FAILED     // 환불 실패
}

enum PointType {
  EARNED    // 적립
  USED      // 사용
  EXPIRED   // 만료
  CANCELLED // 취소
  ADMIN     // 관리자 지급/차감
}

enum CouponType {
  FIXED      // 고정 금액 할인
  PERCENTAGE // 비율 할인
}